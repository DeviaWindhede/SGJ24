//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""ShopControls"",
            ""id"": ""c3ddd73a-8faf-4052-8010-b34f3c8f5b68"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b7fba9a4-649d-4b38-b222-4a41c2893261"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""11eed89e-a52e-4b44-8610-8b86c9bbd1ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deny"",
                    ""type"": ""Button"",
                    ""id"": ""f8a1ca3b-4fc6-4830-a9f3-59331e7bfd15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cfe6a180-3cc2-404f-ab67-f2ac4081e16d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f3458e91-8c8a-436d-9023-bb6e4134acbe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5897f483-46ba-4c60-ba63-3cca7d6bf5ff"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9d4ed0e9-0773-4f12-a52c-dbb75d41790d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c775782e-4271-4ec5-95bf-4d682d3ae5ef"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa0c77b3-7c50-4fc2-a112-1a85f6157a13"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8694c48f-5034-4789-b491-746e8b3fcef9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deny"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MiniGameControls"",
            ""id"": ""d65ed607-c60b-424a-b647-94c723490dd8"",
            ""actions"": [
                {
                    ""name"": ""MouseDown"",
                    ""type"": ""Button"",
                    ""id"": ""03135cba-dc58-47a2-9c2e-194c4c1165e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""10f93885-16ca-4dba-b1cf-57f55a719cd4"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da2e2df6-c23b-4237-8628-9bd111e226f1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d13fc0db-3081-4d9d-b83b-d9808d31975e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShopControls
        m_ShopControls = asset.FindActionMap("ShopControls", throwIfNotFound: true);
        m_ShopControls_Move = m_ShopControls.FindAction("Move", throwIfNotFound: true);
        m_ShopControls_Interact = m_ShopControls.FindAction("Interact", throwIfNotFound: true);
        m_ShopControls_Deny = m_ShopControls.FindAction("Deny", throwIfNotFound: true);
        // MiniGameControls
        m_MiniGameControls = asset.FindActionMap("MiniGameControls", throwIfNotFound: true);
        m_MiniGameControls_MouseDown = m_MiniGameControls.FindAction("MouseDown", throwIfNotFound: true);
        m_MiniGameControls_MouseMove = m_MiniGameControls.FindAction("MouseMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShopControls
    private readonly InputActionMap m_ShopControls;
    private List<IShopControlsActions> m_ShopControlsActionsCallbackInterfaces = new List<IShopControlsActions>();
    private readonly InputAction m_ShopControls_Move;
    private readonly InputAction m_ShopControls_Interact;
    private readonly InputAction m_ShopControls_Deny;
    public struct ShopControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public ShopControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ShopControls_Move;
        public InputAction @Interact => m_Wrapper.m_ShopControls_Interact;
        public InputAction @Deny => m_Wrapper.m_ShopControls_Deny;
        public InputActionMap Get() { return m_Wrapper.m_ShopControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShopControlsActions set) { return set.Get(); }
        public void AddCallbacks(IShopControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShopControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShopControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Deny.started += instance.OnDeny;
            @Deny.performed += instance.OnDeny;
            @Deny.canceled += instance.OnDeny;
        }

        private void UnregisterCallbacks(IShopControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Deny.started -= instance.OnDeny;
            @Deny.performed -= instance.OnDeny;
            @Deny.canceled -= instance.OnDeny;
        }

        public void RemoveCallbacks(IShopControlsActions instance)
        {
            if (m_Wrapper.m_ShopControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShopControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShopControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShopControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShopControlsActions @ShopControls => new ShopControlsActions(this);

    // MiniGameControls
    private readonly InputActionMap m_MiniGameControls;
    private List<IMiniGameControlsActions> m_MiniGameControlsActionsCallbackInterfaces = new List<IMiniGameControlsActions>();
    private readonly InputAction m_MiniGameControls_MouseDown;
    private readonly InputAction m_MiniGameControls_MouseMove;
    public struct MiniGameControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public MiniGameControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDown => m_Wrapper.m_MiniGameControls_MouseDown;
        public InputAction @MouseMove => m_Wrapper.m_MiniGameControls_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_MiniGameControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniGameControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMiniGameControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MiniGameControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MiniGameControlsActionsCallbackInterfaces.Add(instance);
            @MouseDown.started += instance.OnMouseDown;
            @MouseDown.performed += instance.OnMouseDown;
            @MouseDown.canceled += instance.OnMouseDown;
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
        }

        private void UnregisterCallbacks(IMiniGameControlsActions instance)
        {
            @MouseDown.started -= instance.OnMouseDown;
            @MouseDown.performed -= instance.OnMouseDown;
            @MouseDown.canceled -= instance.OnMouseDown;
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
        }

        public void RemoveCallbacks(IMiniGameControlsActions instance)
        {
            if (m_Wrapper.m_MiniGameControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMiniGameControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MiniGameControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MiniGameControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MiniGameControlsActions @MiniGameControls => new MiniGameControlsActions(this);
    public interface IShopControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnDeny(InputAction.CallbackContext context);
    }
    public interface IMiniGameControlsActions
    {
        void OnMouseDown(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
}
